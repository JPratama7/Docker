name: Image Builder

on:
  push:
  workflow_dispatch:

jobs:
  PHP:
    strategy:
      matrix:
        build: [
          "7.4", "8.1", "8.1-net7"
          ]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Enable experimental features for the Docker daemon and CLI
        run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'
          docker buildx version
      - name: Setup docker-slim
        run: curl -sL https://raw.githubusercontent.com/docker-slim/docker-slim/master/scripts/install-dockerslim.sh | sudo -E bash -
      - name: Setup docker-squash
        run: |
          	pushd /tmp/dockerslim
            local DIST=""
            local EXT=""
            local FILENAME=""
            local KERNEL=""
            local MACHINE=""
            local TMP_DIR=""
            local URL=""
            local VER=""

            # Get the current released tag_name
            VER=$(curl -sL https://api.github.com/repos/docker-slim/docker-slim/releases \
                  | grep tag_name | head -n1 | cut -d'"' -f4)

            if [ -n "${VER}" ]; then
              URL="https://downloads.dockerslim.com/releases/${VER}"
            else
              echo "ERROR! Could not retrieve the current DockerSlim version number."
              exit 1
            fi

            # Get kernel name and machine architecture.
            KERNEL=$(uname -s)
            MACHINE=$(uname -m)

            # Determine the target distrubution
            if [ "${KERNEL}" == "Linux" ]; then
              EXT="tar.gz"
              if [ "${MACHINE}" == "x86_64" ]; then
                DIST="linux"
              elif [ "${MACHINE}" == "armv7l" ]; then
                DIST="linux_arm"
              elif [ "${MACHINE}" == "aarch64" ]; then
                DIST="linux_arm64"
              fi
            elif [ "${KERNEL}" == "Darwin" ]; then
              EXT="zip"
              if [ "${MACHINE}" == "x86_64" ]; then
                DIST="mac"
              elif [ "${MACHINE}" == "arm64" ]; then
                DIST="mac_m1"
              fi
            else
              echo "ERROR! ${KERNEL} is not a supported platform."
              exit 1
            fi

            # Was a known distribution detected?
            if [ -z "${DIST}" ]; then
              echo "ERROR! ${MACHINE} is not a supported architecture."
              exit 1
            fi

            # Derive the filename
            FILENAME="dist_${DIST}.${EXT}"

            echo " - Downloading ${URL}/${FILENAME}"
            curl -sLo "${FILENAME}" "${URL}/${FILENAME}"

            echo " - Unpacking ${FILENAME}"
            if [ "${EXT}" == "zip" ]; then
              unzip -qq -o "${FILENAME}"
            elif [ "${EXT}" == "tar.gz" ]; then
              tar -xf "${FILENAME}"
            else
              echo "ERROR! Unexpected file extension."
              exit 1
            fi

            # /usr/local/bin should be present on Linux and macOS hosts. Just be sure.
            if [ -d /usr/local/bin ]; then
              echo " - Placing docker-slim in /usr/local/bin"
              mv "dist_${DIST}/docker-slim" /usr/local/bin/
              mv "dist_${DIST}/docker-slim-sensor" /usr/local/bin/
              chmod +x /usr/local/bin/docker-slim
              chmod +x /usr/local/bin/docker-slim-sensor

              echo " - Cleaning up"
              echo -en " - "
              docker-slim --version
            else
              echo "ERROR! /usr/local/bin is not present. Install aborted."
              exit 1
            fi
            popd
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker
        run : |
          docker build -f php/${{ matrix.build }}/Dockerfile -t jpratama7/php-fpm-nginx:build-fat .
          docker-squash -v -t jpratama7/php-fpm-nginx:${{ matrix.build }}-latest jpratama7/php-fpm-nginx:build-fat
          docker push jpratama7/php-fpm-nginx:${{ matrix.build }}-latest
          docker-squash -v -t jpratama7/php-fpm-nginx:${{ matrix.build }} jpratama7/php-fpm-nginx:build-fat
          docker push jpratama7/php-fpm-nginx:${{ matrix.build }}

  Python:
    strategy:
      matrix:
        build: [
          "3.10"
          ]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.build }}
      - name: Enable experimental features for the Docker daemon and CLI
        run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'
          docker buildx version
      - name: Setup docker-slim
        run: curl -sL https://raw.githubusercontent.com/docker-slim/docker-slim/master/scripts/install-dockerslim.sh | sudo -E bash -
      - name: Setup docker-squash
        run: pip install --user https://github.com/goldmann/docker-squash/archive/master.zip
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker
        run : |
          docker build -f python/${{ matrix.build }}/Dockerfile -t jpratama7/bullseye-python:build-fat-${{ matrix.build }} .
          docker-squash -v -t jpratama7/bullseye-python:latest-${{ matrix.build }} jpratama7/bullseye-python:build-fat-${{ matrix.build }}
          docker-squash -v -t jpratama7/bullseye-python:${{ steps.date.outputs.date }}-${{ matrix.build }} jpratama7/bullseye-python:build-fat-${{ matrix.build }}
          docker push jpratama7/bullseye-python:${{ steps.date.outputs.date }}-${{ matrix.build }}
          docker push jpratama7/bullseye-python:latest-${{ matrix.build }}